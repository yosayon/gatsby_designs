Option 1: User signs on via facebook - done
1. User visits webpage
2. User clicks on "Sign-in"
3. User is directed to FB to sign in
4. FB sends webpage token
5. Webpage sends FB back the token
6. FB confirms that we received the token and sends user data
7. We grab the user data and find or create a new user based on that data
8. User is signed in and presented with the homepage along with their name on the right corner

Option 2: User opts out of signing in via Facebook and creates an account with our webpage - done
1. User visits webpage
2. User clicks on "Create Account"
3. User is directed to the a form to enter their name, email, password.
4. User enters their information and is presented with the homepage.

Option 3: user already has an account with us and signs in - done
1. user navigates to sign in page and signs in

Validation for signup/signin - done
1. User cannot create an account without:
-name
-email
-password
2. Validation errors show when a user does not input valid, required fields
3. User is redirected back to the form that is pre-populated

Clean up unused code - do this last

Add Nested Resources for User
1. A user can have many reviews and a review belongs to a user - do this last
2. Add nested resource for a user to create a review for a product - do this last

Products - done
Add products onto products table
Add routes for products
Add pictures onto products#index page
Addname and price onto products page
Each product should link to it's individual products#show page

Cart - done
a user can add a product to their cart
A product has many line-items
A line-item belongs to a product
When user clicks on "add to cart" it should create a new line-item with the product inside that line item in the user's cart show page
create cart routes - cart is nested under user
create cart show page
create cart edit page - implement last

Order- done
When a user checks out, the cart line items are removed 
When a user checks out they are brought to the thank you page
When a user checks out they can click on the order link on the thank you page to take them to the orders#show page

User
When a user clicks on their name, it will show the user's homepage which should include:
1. a link to view all of the user's orders (user_orders#index)
2. a link to view the user's product reviews (user_reviews#index)


Next:
1. Figure out why orders index is not displaying products per order. - fixed
It has something to do with calling "current_order" which is creating a new order. - fixed
2. Add current_order to application class and see if that will fix the issue. - fixed


clear all data and start over.
add order total - done
add cart edits (increase, decrease quantity, and delete from cart buttons/links - done

figure out how to create a line item if the product that's being added to the cart is new - done
figure out how to increase quantity of a line item if that line item already exists in the cart a line item - done
already exists in a cart if the user had added the product into their cart. 

I would look in line_item model to see where we can place all this logic. - done

Recreate Bugs:
1. sign in, add item to cart, decrease quantity to zero, go to shop add another item to cart-- line_item is not in cart. 

Add an option for a user to write a review for a product.

try to break the app.

Validations:
1. user cannot add an item to cart unless they are signed in
2. finish blog and create video

popular products 
1. create a product class method that creates a product_count hash that counts each product purchased and how many times they were purchased
2. 

1. a user should be able to be redirected to their current_uri after being prompted to login_path
2. a user cannot add item to cart unless they are signed in
3. a user cannot view their cart unless they are signed in
4. after a user creates a user account, they will be redirected back to the current_uri
5. after a user logs in, they will be redirected back to the current_uri

next steps:
1. create a route login_from_checkout => sessions#login_from_checkout
2. add merge_cart_items method in application controller


I need  a helper method for the carts show page for the button to check out. If the user is not logged in => login from checkout


Helper methods are for views
Partials can b rendered depending on the conditions of the methods in helper methods!

add a helper method in sessions controller to ask if the user is logging in from checkout
if so, render the login_from_checkout path
if not, render the regular login path!

issue
adding to cart is creating two temp users....why?
add to cart redirects to product_line_items_path

temp_user creation

**fix the logging out with empty cart issue please

Temp Users:
temp user is first created if a user is not logged in AND when the temp user clicks on "add to cart"
the session temp id will be created after the user clicks on the button. 
a temp user's life span is from the time they add a product to cart - until a user logs in and checks out. 

need to find a way to clear temp id if someone is signing in directly from the sign in page and not the checkout page.

Next steps: Add validations to cart --> cannot check out if cart is empty

use self.checkedoutorders from order for the index page

scenario for when to delete a temp user:
existing users in app
no users signed on
temp user adds something to cart
temp user doesn't check out but instead signs in, temp user's cart should be deleted and temp user should be deleted

1. add validations for when a temp user is signed in and when checked out, the temp user signs up instead of signing in. I found that when I do this, the cart items does not merge and the temp data is not purged. Place some validations into the user controller where a new user is created. 

Where to find the session_user?
1. in order to checkout you need to be signed in, so it's not in the carts controller, carts controller is require login
2. sessions controller is where if the temp user actually signs in and has an account, the sessions#create will check if there is a temp_user cart and if so, it will merge those cart items and purge the temp user data which is what we want!
3. What if a temp user checks out and there is no items in the cart? Add validations for this, it's currently only for signed in users.
4. In the users controller, we need to merge mart items too if there is an active session[:temp_id]

scenario for when to delete a temp user cart.
if a user is scrolling through and adds item to cart, a temp user cart is created. If the user signs in not by check out, prompt the user to select whether or not they want to add items to their cart. - done! This is complete with the merge_cart_items if session[:temp_id] in the users and sessions create controller actions! waaahoooo!

Try to break the app:



yosa fb order 166 dave
scott's open cart url => users/1685366171540670/carts/104 added andrea to cart order # 167

yosa entered scott's open cart url and checked out. cart appeared empty and when checked out, it said cart cannot be empty. 
signed in as scott and checked ordered items and found that order 167 was processed AND scott's cart still had andrea in cart! When I clicked on check out, the order was processed as order 167!? there is still only one order. 

So we know that Yosa was able to checkout for scott even though we couldn't see any items in the cart and the cart said cannot check out with empty cart!

authenticate user when:
they navigate to their cart
they add or edit their cart or delete their cart

is a session user exists, then this just means you either have a current user who is logged in or a temp user
and if the requested link's user ID does not match the session_user, then render the 422 error page - done

is there is no session user then no one is logged in and the person is simply trying to request a url that they know they don't have access to. In this case, please redirect them to the same page. - done

order does not show unless it's been checked out. - done

confirmed_orders


product.line_items.confirmed_orders

Product.confirmed_orders

through products
/products/:id/reviews
/products/popular ---> popular is the overall average rating of a product.

/user/:id  ---> should should links to:
1. /user/:id/orders
2. /user/:id/order/:order_id
3. /user/:id/reviews
4. /user/:id/review/

